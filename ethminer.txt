Скачиваем, прописываем в бат-файл:

Setx GPU_FORCE_64BIT_PTR 0
Setx GPU_MAX_HEAP_SIZE 100
Setx GPU_USE_SYNC_OBJECTS 1
SETx GPU_SINGLE_ALLOC_PERCENT 100
это для освобождения памяти на видеокартах  (критично для 2х гиговых)
 
 
CUDA ядро портировано из ядра OpenCL Тима Хьюза
При участии nicehash, nerdralph, Робик и sp_

Опции:

Работа с пулом:
-F,--farm  - переключен в режим работы с пулом по getwork (по умолчанию: http://127.0.0.1:8545)
-FF,-FO, --farm-failover, --stratum-failover Failover getwork/stratum URL  - (по умолчанию: отключено)
--farm-retries - Число повторных попыток до фразы "да пошёл ты..." и перехода на failover (по умолчанию: 3)
-S, --stratum - переключен в режим через stratum на хост:порт
-FS, --failover stratum <хост: порт> failover через stratum хост:порт
-О, --userpass - Учетные данные.
-FS, --failover-stratum failover - логин (кошель) или пароль (по желанию, при не указанном будут использовать обычные учетные данные.)
--work-timeout - Возврат/переход на следующий failover. По умолчанию 180. Меньше устанавливать лучше не надо.
-SC, --stratum-client Stratum - версия клиента. По умолчанию 1 (клиент асинхронном). 2 - чтобы использовать новый синхронный клиент.
-SP, --stratum-protocol - Выберите, какой протокол понимает stratum на пуле:
0: официальный stratum: ethpool, ethermine, coinotron, mph, nanopool(по умолчанию)
1: eth-proxy совместимый: dwarfpool, f2pool, nanopool
2: EthereumStratum / 1.0.0: nicehash
-SE, --stratum-email <s> - Email который используется eth-proxy для мониторинга(опционально)
    --farm-recheck <n> Оставьте п мс между проверками для измененной работы (по умолчанию: 500). При использовании stratum, использовать высокое значение (т.е. 2000), чтобы hashrate не скакал.

Конфигурация Mining:
    -G,--opencl Когда копаем на GPU с помощью OpenCL. AMD.
    -U,--cuda Когда копаем на GPU с помощью CUDA. NVIDIA
    -X,--cuda-opencl Использование OpenCL + CUDA когда в системе понатыкано что попало. Может потребоваться установка --opencl-platform 1
    -С --запустится майнинг на процессоре
 
в некоторых случаях если майнер пишет что "No GPU device" помогает добавление параметра:
Код: [Выделить]

--opencl-platform 1


Пример батника:

Код: [Выделить]

setx GPU_FORCE_64BIT_PTR 0
setx GPU_MAX_HEAP_SIZE 100
setx GPU_USE_SYNC_OBJECTS 1
setx GPU_MAX_ALLOC_PERCENT 100
setx GPU_SINGLE_ALLOC_PERCENT 100
color 02
ethminer.exe -G -S eth-eu1.nanopool.org:9999 -O 0xc0380404cA10b1EEd41ad4C309d5b710BA0f5601.max1


Конфигурация майнинга:
    -G,--opencl  когда используются видеокарты на OpenCL (AMD).
    -U,--cuda  когда используются видеокарты на CUDA (nVidia).
    -X,--cuda-opencl когда используются смешанные системы OpenCL + CUDA из карт AMD/Nvidia (может потребоваться указать  --opencl-platform 1).
 
 
Опции:
 
    -F,--farm <адрес_url>  Запускает майнинг с рабочим сервером по адресу (по умолчаиню  http://127.0.0.1:8545)
 
    -FF,-FO, --farm-failover, --stratum-failover <адрес_url> адрес резервного пула (Failover) getwork/stratum (по умолчанию отсутствует)
 
    --farm-retries <n> Число попыток подключения до переключения на резервный пул (по умолчанию 3)
 
    -S, --stratum <адрес:порт>  включение режима Стратум со стратум-сервером по адресу адрес:порт
 
    -FS, --failover-stratum <адрес:порт>  Стратум-адрес резервного пула (Failover) адрес:порт
 
    -O, --userpass <имя_пользователя.имя_воркера:пароль> данные для входа Stratum
 
    -FO, --failover-userpass <username.workername:password> данные для входа Стратум для резервного пула (Failover) 
         (не обязательно, используются основные данные из командной строки, если пропущено)
 
    --share-timeout <n> переподключение в случае, если нет подтверждения отправленной шары в течении  n мс  (нефункционально - для тестирования)
 
    -SP, --stratum-protocol <n> выбор протокола Стратум для использования:
        0 (по умолчанию): официальный протокол Стратум: ethpool, ethermine, coinotron, mph, nanopool)
        1: eth-proxy: dwarfpool, f2pool, nanopool
        2: EthereumStratum/1.0.0: nicehash
 
    -SE, --stratum-email <s> адрес электронной почты для использования в eth-proxy (необязательно)
 
    --farm-recheck <n>  период n мс между запросами на новую работу (по умолчанию  500 ). При использовании протокола Стратум, укажите большее значение (например  2000) для получения более стабильного вывода хешрейта
 
    --opencl-platform <n>  когда для майнинга используется -G/--opencl используйте номер платформы OpenCL  № n (по умолчанию 0).
 
    --opencl-device <n>  когда для майнинга используется -G/--opencl используйте OpenCL устройство № n (по умолчанию 0).
 
    --opencl-devices <0 1 ..n> выбор OpenCL устройств для майнинга. По умолчанию используются все видеокарты.
 
    -t, --mining-threads <n> ограничение числа майнящих видеокарт до n (по умолчанию используются все доступные на выбранной платформе)
 
    --allow-opencl-cpu позволяте процессору (CPU) считаться устройством OpenCL, если платформа OpenCL это поддерживает.
 
    --list-devices список определённых устройств OpenCL/CUDA и выход (должно комбинироваться с флагами -G или -U).
 
    -L, --dag-load-mode <mode> режим генерации DAG.
        parallel    - загружает DAG-файлы на все видеокарты одновременно (по умолчанию)
        sequential  - загружает DAG-файлы на видеокарты по очереди.  Используйте, если майнинг прекращается на генерации DAG-ов
        single <n>  - генерирует DAG на устрйстве № n, затем копирует его на другие устройства
 
    --cl-extragpu-mem устанавливает размер памяти (в MB), которое, по вашему мнению требуется видеокарте для других целей,
         кроме майнинга (Windows, рендеринг и т.д., по умолчанию 0)
 
    --cl-local-work устанавливает локальный размер работы OpenCL (local work size).  По умолчанию 64.
 
    --cl-global-work устанавливает глобальный размер работы OpenCL (global work size) как множество, кратное локальному размеру. По умолчанию 4096 * 64.
 
    --cuda-extragpu-mem  устанавливает размер памяти (в MB), которое, по вашему мнению требуется видеокарте для других целей,
      кроме майнинга (Windows, рендеринг и т.д., по умолчанию 0)
 
    --cuda-block-size  задаёт размер блока CUDA. По умолчанию 128.
 
    --cuda-grid-size  устанавливает размер сетки (grid) CUDA. По умолчанию 8192.
 
    --cuda-streams задаёт число потоков CUDA. По умолчанию 2.
 
    --cuda-schedule <режим> задаёт потокам  CUDA время ожидания для устройств CUDA до окончания работы. По умолчанию 'sync'.
        Возможные значения:
        auto  - использует эвристический анализ на основании числа активных CUDA, учавствующих в процессе C и число логических процессоров в системе P. Если C > P, тогда применяется yield, в противном случае spin.
        spin  - инструктирует CUDA быть активным при ожидании результатов от устройства.
        yield - инструктирует CUDA уступить этот поток при ожидании результатов от устройства.
        sync  - инструктирует CUDA блокировать поток ЦП на примитивной синхронизации при ожидании результатов от устройства.
 
    --cuda-devices <0 1 ..n> выбор устройств с ГП CUDA для майнинга. По умолчанию используются все.
 
 
Прочие опции:
    -v,--verbosity <0 - 9>  устанавливает "многословность" (verbosity) лога от 0 до 9 (по умолчанию 8).
    -V,--version  показывает номер версии и закрывается.
    -h,--help  показывает страницу помощи (help) и закрывается.
 
 
Режим бенчмарка:
    -M [<n>],--benchmark [<n>] бенчмарк для майнинга и выход. Опционально можно указать номер блока и провести бенчмарк для определённого DAG.
    --benchmark-warmup <секунды>  задаёт длительность прогрева для бенчмарк-теста (по умолчанию 3).
    --benchmark-trial <seconds>  задаёт продолжительность каждой попытки бенчмарк-теста (по умолчанию 3).
   
 
Режим симуляции:
    -Z [<n>],--simulation [<n>] режим тестового майнинга. Используется для применения опртимизаций ядра. При желании можно указать номер блока. 
    